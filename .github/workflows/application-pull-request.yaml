name: Application - Pull Request

on:
  workflow_call:
    inputs:
      application-name:
        type: string
        required: true
      install-dependencies:
        type: boolean
        default: false
      dockerfile-location:
        type: string
        default: ./
      run-tests:
        type: boolean
        default: false
    secrets: inherit

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.export.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Node.js (if needed)
        if: ${{ inputs.install-dependencies }}
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install npm dependencies
        if: ${{ inputs.install-dependencies }}
        run: |
          cd ${{ inputs.dockerfile-location }}
          echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
          npm ci
          rm .npmrc

      - name: Build multi-platform Docker image
        run: |
          IMAGE=${{ inputs.application-name }}:test
          cd ${{ inputs.dockerfile-location }}
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMAGE \
            --load .

      - name: Export image name
        id: export
        run: echo "image=${{ inputs.application-name }}:test" >> $GITHUB_OUTPUT

  integration-tests:
    if: ${{ inputs.run-tests }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set image ENV
        run: echo "IMAGE=${{ needs.build.outputs.image }}" >> $GITHUB_ENV

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Run integration tests
        run: mvn clean install -P integration-tests

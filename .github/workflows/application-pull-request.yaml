name: Application - Pull Request

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      install-dependencies:
        type: boolean
        default: false
      dockerfile-location:
        type: string
        default: ./
      run-tests:
        type: boolean
        default: false
      sample-data-folder:
        type: string
        default: ./application-data-sample/
      build-sample-data:
        type: boolean
        default: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Build application
      - name: Install NodeJS
        if: ${{ inputs.install-dependencies }}
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        if: ${{ inputs.install-dependencies }}
        run: |
          cd ${{ inputs.dockerfile-location }}
          echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
          npm install
          ls -la node_modules || echo "node_modules not found"
          ls -la node_modules/@codbex || echo "@codbex packages not found"
          rm -rf .npmrc

      - name: Build Application Image
        run: |
          cd ${{ inputs.dockerfile-location }}
          APP_IMAGE="${{ inputs.application-name }}:test"
          docker build -t $APP_IMAGE .
          echo "APP_IMAGE=$APP_IMAGE" >> $GITHUB_ENV

      # Build sample data (if enabled)
      - name: Build Sample Data Image
        if: ${{ inputs.build-sample-data }}
        run: |
          cd ${{ inputs.sample-data-folder }}
          SAMPLE_IMAGE="${{ inputs.application-name }}-data-sample:test"
          docker build -t $SAMPLE_IMAGE .
          echo "SAMPLE_IMAGE=$SAMPLE_IMAGE" >> $GITHUB_ENV

      # Run tests (if enabled)
      - name: Run Integration Tests
        if: ${{ inputs.run-tests }}
        run: |
          # Verify images exist
          docker images
          docker inspect $APP_IMAGE || (echo "Application image not found" && exit 1)
          if [ "${{ inputs.build-sample-data }}" = "true" ]; then
            docker inspect $SAMPLE_IMAGE || (echo "Sample data image not found" && exit 1)
          fi

          # Configure and run tests
          export MAVEN_OPTS="-Dapp.image=$APP_IMAGE"
          if [ "${{ inputs.build-sample-data }}" = "true" ]; then
            export MAVEN_OPTS="$MAVEN_OPTS -Dsample.data.image=$SAMPLE_IMAGE"
          fi
          mvn clean install -P integration-tests
name: Application - Pull Request

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      install-dependencies:
        type: boolean
        default: false
      dockerfile-location:
        type: string
        default: ./
      run-tests:
        type: boolean
        default: false
      sample-data-folder:
        type: string
        default: ./application-data-sample/
      build-sample-data:
        type: boolean
        default: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Application setup
      - name: Install NodeJS
        if: ${{ inputs.install-dependencies }}
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Build Application
        run: |
          cd ${{ inputs.dockerfile-location }}
          
          if [ "${{ inputs.install-dependencies }}" = "true" ]; then
            echo "Installing dependencies..."
            echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
            npm install
            rm -rf .npmrc
          fi
          
          docker build -t ${{ inputs.application-name }}:test .

      - name: Build Sample Data
        if: ${{ inputs.build-sample-data }}
        run: |
          cd ${{ inputs.sample-data-folder }}
          echo "Installing sample data dependencies..."
          echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
          npm install
          rm -rf .npmrc
          docker build -t ${{ inputs.application-name }}-data-sample:test .

      - name: Run Tests
        if: ${{ inputs.run-tests }}
        env:
          APP_IMAGE: ${{ inputs.application-name }}:test
          SAMPLE_DATA_IMAGE: ${{ inputs.application-name }}-data-sample:test
        run: |
          # Verify images exist
          docker inspect $APP_IMAGE
          if [ "${{ inputs.build-sample-data }}" = "true" ]; then
            docker inspect $SAMPLE_DATA_IMAGE
          fi

          # Configure test environment
          export MAVEN_OPTS="-Dapp.image=$APP_IMAGE"
          if [ "${{ inputs.build-sample-data }}" = "true" ]; then
            export MAVEN_OPTS="$MAVEN_OPTS -Dsample.data.image=$SAMPLE_DATA_IMAGE"
          fi

          # Run tests with local images
          echo "TESTCONTAINERS_DOCKER_IMAGE_PULL_POLICY=never" >> $GITHUB_ENV
          mvn clean install -P integration-tests
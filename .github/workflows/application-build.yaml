name: Application - Build

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      install-dependencies:
        type: boolean
        default: false
      dockerfile-location:
        type: string
        default: ./
      run-tests:
        type: boolean
        default: false
      tests-package:
        type: string
      image-property-name:
        type: string
        default: "app.image"

env:
  IMAGE_NAME: ghcr.io/codbex/${{ inputs.application-name }}:latest
  LOCAL_TEST_TAG: ${{ inputs.application-name }}:test

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install NodeJS
        if: ${{ inputs.install-dependencies }}
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies (if needed)
        if: ${{ inputs.install-dependencies }}
        run: |
          cd ${{ inputs.dockerfile-location }}
          echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
          npm install
          rm -rf .npmrc

      - name: Build Application Image (locally, without pushing yet)
        run: |
          cd ${{ inputs.dockerfile-location }}
          docker buildx create --name codbex-builder --use || true
          docker build -t $IMAGE_NAME -t $LOCAL_TEST_TAG .

      - name: Run Integration Tests
        if: ${{ inputs.run-tests }}
        run: |
          # Use the local test-tagged image
          docker inspect $LOCAL_TEST_TAG
          mvn clean install -P integration-tests "-Dit.test=${{ inputs.tests-package }}" -D${{ inputs.image-property-name }}=$LOCAL_TEST_TAG

      - name: Push Application Image (only if tests passed)
        if: ${{ inputs.run-tests }}
        run: |
          echo "Pushing image to GHCR..."
          docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push $IMAGE_NAME

      - name: Generate a random artifact name
        if: always()
        id: generate_name
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          echo "ARTIFACT_NAME=selenide-screenshots-${TIMESTAMP}.zip" >> $GITHUB_ENV

      - name: Upload selenide screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          retention-days: 1
          name: ${{ env.ARTIFACT_NAME }}
          path: integration-tests/build/reports/tests

name: Application - Pull Request

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      install-dependencies:
        type: boolean
        default: false
      dockerfile-location:
        type: string
        default: ./
      run-tests:
        type: boolean
        default: false
      sample-data-folder:
        type: string
        default: ./application-data-sample/
      build-sample-data:
        type: boolean
        default: false

jobs:
  build-app:
    runs-on: ubuntu-latest
    outputs:
      app-image: ${{ steps.build-app.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Install NodeJS
        if: ${{ inputs.install-dependencies }}
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        if: ${{ inputs.install-dependencies }}
        run: |
          cd ${{ inputs.dockerfile-location }}
          echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
          npm install
          rm -rf .npmrc

      - name: Build Application Image
        id: build-app
        run: |
          cd ${{ inputs.dockerfile-location }}
          APP_IMAGE="${{ inputs.application-name }}:test"
          docker build -t $APP_IMAGE .
          echo "image=$APP_IMAGE" >> $GITHUB_OUTPUT
          
          # Save image to artifact
          mkdir -p docker-images
          docker save -o docker-images/app-image.tar $APP_IMAGE

      - name: Upload Application Image
        uses: actions/upload-artifact@v3
        with:
          name: app-image
          path: docker-images/app-image.tar

  build-sample-data:
    if: ${{ inputs.build-sample-data }}
    runs-on: ubuntu-latest
    needs: build-app
    outputs:
      sample-image: ${{ steps.build-sample-data.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Prepare Sample Data Directory
        run: |
          cd ${{ inputs.sample-data-folder }}
          if [ -f package.json ]; then
            echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
            npm install
            rm -rf .npmrc
          fi

      - name: Build Sample Data Image
        id: build-sample-data
        run: |
          cd ${{ inputs.sample-data-folder }}
          SAMPLE_IMAGE="${{ inputs.application-name }}-data-sample:test"
          docker build -t $SAMPLE_IMAGE .
          echo "image=$SAMPLE_IMAGE" >> $GITHUB_OUTPUT
          
          # Save image to artifact
          mkdir -p docker-images
          docker save -o docker-images/sample-image.tar $SAMPLE_IMAGE

      - name: Upload Sample Data Image
        uses: actions/upload-artifact@v3
        with:
          name: sample-image
          path: docker-images/sample-image.tar

  integration-tests:
    if: ${{ inputs.run-tests }}
    needs: [build-app, build-sample-data]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Images
        uses: actions/download-artifact@v3
        with:
          path: docker-images

      - name: Load Docker Images
        run: |
          docker load -i docker-images/app-image.tar
          if [ "${{ inputs.build-sample-data }}" = "true" ]; then
            docker load -i docker-images/sample-image.tar
          fi
          docker images

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Configure Testcontainers
        run: |
          echo "TESTCONTAINERS_DOCKER_IMAGE_PULL_POLICY=never" >> $GITHUB_ENV
          echo "DOCKER_HOST=" >> $GITHUB_ENV

      - name: Run Integration Tests
        env:
          APP_IMAGE: ${{ needs.build-app.outputs.app-image }}
          SAMPLE_DATA_IMAGE: ${{ needs.build-sample-data.outputs.sample-image }}
        run: |
          # Verify images are present
          docker inspect $APP_IMAGE || exit 1
          if [ "${{ inputs.build-sample-data }}" = "true" ]; then
            docker inspect $SAMPLE_DATA_IMAGE || exit 1
          fi
          
          # Run tests with local images
          export MAVEN_OPTS="-Dapp.image=$APP_IMAGE -Dsample.data.image=$SAMPLE_DATA_IMAGE"
          mvn clean install -P integration-tests
name: Application - Release

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      release-version:
        type: string
        required: true
      release-content:
        type: string
        required: true
      release-package:
        type: boolean
        default: true
      release-package-locations:
        type: string
        description: 'A comma-separated list of package locations'
        required: true
      release-package-build-locations:
        type: string
        description: 'A comma-separated list of package build locations'
        required: true
    
run-name: 'version set to ${{ inputs.release-version }} for release'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install TypeScript compiler
      run: npm i -g typescript

    - name: "Configure Git"
      run: |
        git fetch
        git checkout ${{ inputs.branch }}
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Build and Push Docker Image
      run: |
        docker buildx create --name codbex-builder
        docker buildx use codbex-builder
        docker buildx build --tag ${{ inputs.application-name }} -o type=image --platform=linux/arm64,linux/amd64 .
        docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker buildx build --push --tag ghcr.io/codbex/${{ inputs.application-name }}:${{ inputs.release-version }} -o type=image --platform=linux/arm64,linux/amd64 .

    - name: Update package.json version and Build TypeScript
      if: ${{ inputs.release-package }}
      run: |
        IFS=',' read -r -a packages <<< "${{ inputs.release-package-locations }}"
        for package in "${packages[@]}"; do
          cd $package
          npm version ${{ inputs.release-version }} --no-git-tag-version
          git add package.json
          cd ../
        done

        IFS=',' read -r -a buildLocations <<< "${{ inputs.release-package-build-locations }}"
        for buildLocation in "${buildLocations[@]}"; do
          cd $buildLocation
          tsc --pretty > tsc-output.log 2>&1 || true
          cd ../
        done

        for buildLocation in "${buildLocations[@]}"; do
          cd $buildLocation
          grep -v 'TS2688' tsc-output.log > filtered-tsc-output.log
          cd ../
        done

        echo "Print Filtered Errors"

        for buildLocation in "${buildLocations[@]}"; do
        cd $buildLocation
        cat filtered-tsc-output.log
        cd ../
        done

        echo "Fail on Non-Ignored Errors"

        for buildLocation in "${buildLocations[@]}"; do
          cd $buildLocation
          if grep -q 'error TS' filtered-tsc-output.log; then
            exit 1
          fi
          cd ../
        done

    - name: Git Push Release Branch
      run: |
        git checkout -b ${{ inputs.release-version }}
        git push --set-upstream origin ${{ inputs.release-version }}

    - name: "Create Release"
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ inputs.release-version }}
        name: ${{ inputs.release-version }}
        draft: false
        prerelease: false
        files: |
          LICENSE
        body: ${{ inputs.release-content }}

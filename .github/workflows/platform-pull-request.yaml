name: Platform - Build

on:
  workflow_call:
    inputs:
      platform-name:
        required: true
        type: string
      docker-build:
        type: boolean
        default: true
      integration-tests:
        type: boolean
        default: true
      code-style-checks:
        type: boolean
        default: true
      release-otc-helm-chart:
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  otc-helm:
    if: ${{ inputs.release-otc-helm-chart }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: OTC Helm - lint the chart
        run: |
          cd ${{ github.workspace }}
          cd helm/otc/chart
          helm lint .

  code-style:
    if: ${{ inputs.code-style-checks }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK Corretto 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          
      - name: Validate Java code formatting
        run: mvn -T 1C formatter:validate
        
  pull-request:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Set up JDK Corretto 20
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '20'
        architecture: x64
        
    - name: Install NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install esbuild
      run: npm i -g esbuild
      
    - name: Install TypeScript compiler
      run: npm i -g typescript
        
    - name: Maven Build
      run: mvn clean install

    - name: Build Docker Image
      if: ${{ inputs.docker-build }}
      run: |
        docker buildx create --name codbex-builder
        docker buildx use codbex-builder
        cd application
        docker buildx build --tag ${{ inputs.platform-name }} --no-cache -o type=image --platform=linux/arm64,linux/amd64 .

  integration-tests:
    if: ${{ inputs.integration-tests }}
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: true
    strategy:
      matrix:
        os: [ macos ]
    steps:
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1.5.0
        with:
          chrome-version: stable
      - if: runner.os == 'Linux'
        run: chrome --version
      - if: runner.os == 'macOS'
        run: '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version'
      - if: runner.os == 'Windows'
        run: (Get-Item (Get-Command chrome).Source).VersionInfo.ProductVersion
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
          
      - name: Set up JDK Corretto 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install esbuild
        run: npm i -g esbuild
        
      - name: Install TypeScript compiler
        run: npm i -g typescript

      - name: Install ttyd (prebuilt)
        run: |
          sudo apt update
          sudo apt install -y ttyd

      - name: Verify ttyd installation
        run: ttyd --version

      - name: Integration tests
        run: mvn clean install -P integration-tests
        
      - name: Generate a random artifact name
        if: always()
        id: generate_name
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          echo "ARTIFACT_NAME=selenide-screenshots-${TIMESTAMP}.zip" >> $GITHUB_ENV
          
      - name: Upload selenide screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          retention-days: 1
          name: ${{ env.ARTIFACT_NAME }}
          path: application/build/reports/tests

name: Platform - Release

on:
  workflow_call:
    inputs:
      platform-name:
        required: true
        type: string
      release-version:
        type: string
        required: true
      snapshot-version:
        type: string
        required: true
      release-content:
        type: string
        required: true
      maven-release:
        type: boolean
        default: false
      docker-release:
        type: boolean
        default: true
      scan-docker-image:
        type: boolean
        default: true
      release-otc-helm-chart:
        type: boolean
        default: false
    
run-name: 'version set to ${{ inputs.release-version }} for release'

permissions:
  contents: write
  
jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Set up JDK Corretto 21
      if: ${{ !inputs.maven-release }}
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        architecture: x64
        
    - name: Set up JDK Corretto 21
      if: ${{ inputs.maven-release }}
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        architecture: x64
        
    - name: Install NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install esbuild
      run: npm i -g esbuild
      
    - name: Install TypeScript compiler
      run: npm i -g typescript

    # Update versions with current release version
    - name: "Configure Git"
      run: |
        git fetch
        git checkout ${{ inputs.branch }}
        git config user.name "${{ secrets.GH_USERNAME }}"
        git config user.email "${{ secrets.GH_EMAIL }}"

    - name: Maven Set Release Version
      run: |
        mvn versions:set -DnewVersion=${{ inputs.release-version }}
        git add .
        git commit -m "version set to ${{ inputs.release-version }} for release"
    - name: OTC helm - set release version in the chart
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        sed -i "s/^version: .*/version: ${{ inputs.release-version }}/" helm/otc/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: ${{ inputs.release-version }}/" helm/otc/Chart.yaml
        sed -i 's|tag: .*|tag: ${{ inputs.release-version }}|g' helm/otc/values.yaml

        git add .
        git commit -m "update OTC helm version to ${{ inputs.release-version }} for release"

    # Build and push release artifacts
    - name: Maven Build
      run: mvn clean install

    - name: Build and Push Docker Image
      if: ${{ inputs.docker-release }}
      run: |
        docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker buildx create --use
        
        cd application
        docker buildx build --platform linux/amd64,linux/arm64 --tag ghcr.io/codbex/${{ inputs.platform-name }}:${{ inputs.release-version }} --push .

    - name: OTC helm - package the chart
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        cd helm/otc
        helm lint .
        helm package . --destination /tmp/ # Stash the packaged chart
        mv /tmp/otc-*.tgz /tmp/${{ inputs.platform-name }}-${{ inputs.release-version }}-otc.tgz # rename the tar file

    - name: Maven Publish Package
      if: ${{ inputs.maven-release }}
      run: mvn deploy -P release -DskipTests
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Update versions with dev version
    - name: OTC helm - set snapshot version
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        sed -i "s/^version: .*/version: ${{ inputs.snapshot-version }}/" helm/otc/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: ${{ inputs.snapshot-version }}/" helm/otc/Chart.yaml

        git add .
        git commit -m "Update OTC helm version to ${{ inputs.snapshot-version }} for development"

    - name: Maven Set Snapshot Version
      run: |
        mvn versions:set -DnewVersion=${{ inputs.snapshot-version }}
        git add .
        git commit -m "version set to ${{ inputs.snapshot-version }} for development"
        git push origin main
        git checkout -b ${{ inputs.release-version }}
        git push --set-upstream origin ${{ inputs.release-version }}

    # Scan docker image
    - name: Log in Docker Hub # required dockerhub login for docker/scout-action
      if: ${{ inputs.scan-docker-image }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Docker Scout Quickview and CVEs
      if: ${{ inputs.scan-docker-image }}
      uses: docker/scout-action@v1
      with:
        registry-user: ${{ secrets.DOCKER_USERNAME }}
        registry-password: ${{ secrets.DOCKER_PASSWORD }}
        command: quickview,cves
        image: ghcr.io/codbex/${{ inputs.platform-name }}:${{ inputs.release-version }}
        sarif-file: image-scan-report.sarif
        summary: true
        only-fixed: false

    # Create release
    - name: "Create Release with image scan report"
      if: ${{ inputs.scan-docker-image }}
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ inputs.release-version }}
        name: ${{ inputs.release-version }}
        draft: false
        prerelease: false
        files: |
          LICENSE
          image-scan-report.sarif
          /tmp/${{ inputs.platform-name }}-${{ inputs.release-version }}-otc.tgz
        body: ${{ inputs.release-content }}

    - name: "Create Release"
      if: ${{ !inputs.scan-docker-image }}
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ inputs.release-version }}
        name: ${{ inputs.release-version }}
        draft: false
        prerelease: false
        files: |
          LICENSE
          image-scan-report.sarif
          /tmp/${{ inputs.platform-name }}-${{ inputs.release-version }}-otc.tgz
        body: ${{ inputs.release-content }}

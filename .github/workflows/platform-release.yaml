name: Platform - Release

on:
  workflow_call:
    inputs:
      platform-name:
        required: true
        type: string
      release-version:
        type: string
        required: true
      snapshot-version:
        type: string
        required: true
      release-content:
        type: string
        required: true
      maven-release:
        type: boolean
        default: false
      docker-release:
        type: boolean
        default: true
      code-scans:
        type: boolean
        default: true
      upload-scanned-sarif-report:
        type: boolean
        default: true
      release-otc-helm-chart:
        type: boolean
        default: false
    
run-name: 'version set to ${{ inputs.release-version }} for release'

permissions:
  contents: write
  
jobs:
  release-artifacts:
    runs-on: ubuntu-latest
    permissions:
      security-events: write # Required to upload SARIF to GitHub Security tab
      packages: write
      contents: write
      actions: read

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Set up JDK Corretto 21
      if: ${{ !inputs.maven-release }}
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        architecture: x64
        
    - name: Set up JDK Corretto 21
      if: ${{ inputs.maven-release }}
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        architecture: x64
        
    - name: Install NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install esbuild
      run: npm i -g esbuild
      
    - name: Install TypeScript compiler
      run: npm i -g typescript

    # Update versions with current release version
    - name: "Configure Git"
      run: |
        git fetch
        git checkout ${{ inputs.branch }}
        git config user.name "${{ secrets.GH_USERNAME }}"
        git config user.email "${{ secrets.GH_EMAIL }}"

    - name: Maven Set Release Version
      run: |
        mvn versions:set -DnewVersion=${{ inputs.release-version }}
        git add .
        git commit -m "version set to ${{ inputs.release-version }} for release"
    - name: OTC helm - set release version in the chart
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        sed -i "s/^version: .*/version: ${{ inputs.release-version }}/" helm/otc/chart/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: ${{ inputs.release-version }}/" helm/otc/chart/Chart.yaml
        sed -i 's|tag: .*|tag: ${{ inputs.release-version }}|g' helm/otc/chart/values.yaml

        git add .
        git commit -m "update OTC helm version to ${{ inputs.release-version }} for release"

    # Build and push release artifacts
    - name: Maven Build
      run: mvn clean install

    - name: Build and Push Docker Image
      if: ${{ inputs.docker-release }}
      run: |
        docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker buildx create --use
        
        cd application
        docker buildx build --platform linux/amd64,linux/arm64 --tag ghcr.io/codbex/${{ inputs.platform-name }}:${{ inputs.release-version }} --push .

    - name: OTC Helm - package the chart
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        cd ${{ github.workspace }}
        cd helm/otc/chart
        helm lint .
        helm package . --destination /tmp/ # Stash the packaged chart
        mv /tmp/${{ inputs.platform-name }}-${{ inputs.release-version }}.tgz /tmp/${{ inputs.platform-name }}-${{ inputs.release-version }}-otc.tgz # rename the tar file

    - name: Push OTC Helm Chart to GitHub OCI Registry
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        helm push /tmp/${{ inputs.platform-name }}-${{ inputs.release-version }}-otc.tgz oci://ghcr.io/${{ github.repository_owner }}/helm/otc

    - name: Maven Publish Package
      if: ${{ inputs.maven-release }}
      run: mvn deploy -P release -DskipTests -DstagingProgressTimeoutMinutes=10
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Update versions with dev version
    - name: OTC helm - set snapshot version
      if: ${{ inputs.release-otc-helm-chart }}
      run: |
        sed -i "s/^version: .*/version: ${{ inputs.snapshot-version }}/" helm/otc/chart/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: ${{ inputs.snapshot-version }}/" helm/otc/chart/Chart.yaml

        git add .
        git commit -m "Update OTC helm version to ${{ inputs.snapshot-version }} for development"

    - name: Maven Set Snapshot Version
      run: |
        mvn versions:set -DnewVersion=${{ inputs.snapshot-version }}
        git add .
        git commit -m "version set to ${{ inputs.snapshot-version }} for development"
        git push origin main
        git checkout -b ${{ inputs.release-version }}
        git push --set-upstream origin ${{ inputs.release-version }}


  sast-docker-scout-analyze:
    if: ${{ inputs.code-scans }}
    runs-on: ubuntu-latest
    needs: release-artifacts
    permissions:
      security-events: write # Required to upload SARIF to GitHub Security tab

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in Docker Hub # required dockerhub login for docker/scout-action
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Scout Quickview and CVEs

        uses: docker/scout-action@v1
        with:
          registry-user: ${{ secrets.DOCKER_USERNAME }}
          registry-password: ${{ secrets.DOCKER_PASSWORD }}
          command: quickview,cves
          image: ghcr.io/codbex/${{ inputs.platform-name }}:${{ inputs.release-version }}
          sarif-file: sast_docker_scout_sarif.json
          summary: true
          only-fixed: false

      - name: Upload Docker Scout SARIF file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sast_docker_scout_sarif.json
          path: sast_docker_scout_sarif.json

      - name: Upload Docker Scout SARIF Report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ inputs.upload-scanned-sarif-report }}
        with:
          sarif_file: sast_docker_scout_sarif.json


  sast-codeql-analyze:
    if: ${{ inputs.code-scans }}
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: release-artifacts
    permissions:
      security-events: write # Required to upload SARIF to GitHub Security tab

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: manual
          - language: javascript-typescript
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK Corretto 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install TypeScript and esbuild
        run: npm install -g typescript esbuild

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          config: |
            name: "Comprehensive Multi-language CodeQL Config"
            query-filters:
              - exclude:
                  id: java/path-injection
            queries:
              - uses: security-and-quality

      - name: Build Java/Kotlin project
        if: matrix.language == 'java-kotlin'
        run: mvn clean install -P quick-build

      - name: Perform CodeQL Analysis for language ${{ matrix.language }}
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: "sast_codeql_report_${{ matrix.language }}"
          upload: always

      - name: Upload CodeQL Analysis SARIF file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sast_codeql_sarif_${{ matrix.language }}
          path: sast_codeql_report_${{ matrix.language }}

      - name: Generate Security Report for CodeQL Analysis
        uses: rsdmike/github-security-report-action@v3.0.4
        with:
          template: report
          token: ${{ secrets.GITHUB_TOKEN }}
          sarifReportDir: "sast_codeql_report_${{ matrix.language }}"
          outputDir: "security-reports"

      - name: Upload Generated CodeQL Analysis Security Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sast_codeql_report_${{ matrix.language }}
          path: security-reports

  github-release:
    runs-on: ubuntu-latest
    needs: [sast-codeql-analyze, sast-docker-scout-analyze]
    permissions:
      packages: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Scan Artifacts
        uses: actions/download-artifact@v4
        with:
          path: scan-artifacts

      - name: Display Downloaded Artifacts
        run: ls -R scan-artifacts

      - name: Create release files
        run: mkdir release_files

      - name: Copy mandatory files
        run: |
          cp LICENSE release_files/LICENSE

      - name: Copy report files due to naming collisions
        if: ${{ inputs.code-scans }}
        run: |
          cp scan-artifacts/sast_codeql_report_java-kotlin/report.pdf release_files/sast_codeql_report_java-kotlin.pdf
          cp scan-artifacts/sast_codeql_sarif_java-kotlin/java.sarif release_files/sast_codeql_sarif_java-kotlin.sarif
         
          cp scan-artifacts/sast_codeql_report_javascript-typescript/report.pdf release_files/sast_codeql_report_javascript-typescript.pdf
          cp scan-artifacts/sast_codeql_sarif_javascript-typescript/javascript.sarif release_files/sast_codeql_sarif_javascript-typescript.sarif
         
          cp scan-artifacts/sast_docker_scout_sarif.json/sast_docker_scout_sarif.json release_files/sast_docker_scout_sarif.json
         
          cp LICENSE release_files/LICENSE

      - name: "Create GitHub Release"
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ inputs.release-version }}
          name: ${{ inputs.release-version }}
          draft: false
          prerelease: false
          files: |
            release_files/**
          body: ${{ inputs.release-content }}


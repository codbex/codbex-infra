name: Application - Pull Request

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      install-dependencies:
        type: boolean
        default: false
      dockerfile-location:
        type: string
        default: ./
      run-tests:
        type: boolean
        default: false
      sample-data-folder:
        type: string
        default: ./application-data-sample/
      build-sample-data:
        type: boolean
        default: false

jobs:
  build-app:
    runs-on: ubuntu-latest
    outputs:
      app-image: ${{ steps.set-app-image.outputs.image }}
      app-image-tar: ${{ steps.save-app-image.outputs.path }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install NodeJS
        if: ${{ inputs.install-dependencies }}
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        if: ${{ inputs.install-dependencies }}
        run: |
          cd ${{ inputs.dockerfile-location }}
          echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
          npm install
          ls -la node_modules || echo "node_modules not found"
          ls -la node_modules/@codbex || echo "@codbex packages not found"
          rm -rf .npmrc

      - name: Build Application Image
        run: |
          cd ${{ inputs.dockerfile-location }}
          ls -la node_modules/@codbex || exit 1
          APP_IMAGE="${{ inputs.application-name }}:test"
          docker build -t $APP_IMAGE .
          echo "image=$APP_IMAGE" >> $GITHUB_OUTPUT
        id: set-app-image

      - name: Save Application Image
        run: |
          mkdir -p /tmp/docker-images
          APP_IMAGE="${{ steps.set-app-image.outputs.image }}"
          IMAGE_TAR="/tmp/docker-images/app-image.tar"
          docker save -o $IMAGE_TAR $APP_IMAGE
          echo "path=$IMAGE_TAR" >> $GITHUB_OUTPUT
        id: save-app-image

  build-sample-data:
    if: ${{ inputs.build-sample-data }}
    runs-on: ubuntu-latest
    outputs:
      sample-image: ${{ steps.set-sample-image.outputs.image }}
      sample-image-tar: ${{ steps.save-sample-image.outputs.path }}
    steps:
      - uses: actions/checkout@v3

      - name: Prepare Sample Data Directory
        run: |
          cd ${{ inputs.sample-data-folder }}
          if [ -f package.json ]; then
            echo "@codbex:registry=https://npm.pkg.github.com" > .npmrc
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> .npmrc
            npm install
            ls -la node_modules || exit 1
            rm -rf .npmrc
          fi
          ls -la || echo "Directory contents:"

      - name: Build Sample Data Image
        run: |
          cd ${{ inputs.sample-data-folder }}
          SAMPLE_IMAGE="${{ inputs.application-name }}-data-sample:test"
          docker build -t $SAMPLE_IMAGE .
          echo "image=$SAMPLE_IMAGE" >> $GITHUB_OUTPUT
        id: set-sample-image

      - name: Save Sample Data Image
        run: |
          mkdir -p /tmp/docker-images
          SAMPLE_IMAGE="${{ steps.set-sample-image.outputs.image }}"
          IMAGE_TAR="/tmp/docker-images/sample-data-image.tar"
          docker save -o $IMAGE_TAR $SAMPLE_IMAGE
          echo "path=$IMAGE_TAR" >> $GITHUB_OUTPUT
        id: save-sample-image

  integration-tests:
    if: ${{ inputs.run-tests }}
    needs:
      - build-app
      - build-sample-data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Load Docker Images
        run: |
          mkdir -p /tmp/docker-images
          echo "Loading application image..."
          docker load -i ${{ needs.build-app.outputs.app-image-tar }}
          echo "Loading sample data image..."
          docker load -i ${{ needs.build-sample-data.outputs.sample-image-tar }}
          docker images

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Configure Testcontainers
        run: |
          echo "TESTCONTAINERS_DOCKER_IMAGE_PULL_POLICY=never" >> $GITHUB_ENV

      - name: Run Integration Tests
        env:
          APP_IMAGE: ${{ needs.build-app.outputs.app-image }}
          SAMPLE_DATA_IMAGE: ${{ needs.build-sample-data.outputs.sample-image }}
        run: |
          export MAVEN_OPTS="-Dapp.image=$APP_IMAGE -Dsample.data.image=$SAMPLE_DATA_IMAGE"
          mvn clean install -P integration-tests
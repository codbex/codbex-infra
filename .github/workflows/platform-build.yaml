name: Platform - Build

on:
  workflow_call:
    inputs:
      platform-name:
        required: true
        type: string
      docker-build:
        type: boolean
        default: true
      integration-tests:
        type: boolean
        default: true
      code-style-checks:
        type: boolean
        default: true
      upload-scanned-sarif-report:
        type: boolean
        default: true
      release-otc-helm-chart:
        type: boolean
        default: false

jobs:

  otc-helm:
    if: ${{ inputs.release-otc-helm-chart }}
    runs-on: ubuntu-latest
    steps:
      - name: OTC Helm - lint the chart
        run: |
          cd ${{ github.workspace }}
          cd helm/otc
          helm lint .

  code-style:
    if: ${{ inputs.code-style-checks }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK Corretto 21 
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          architecture: x64
          
      - name: Validate Java code formatting
        run: mvn -T 1C formatter:validate
        
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Set up JDK Corretto 20
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '20'
        architecture: x64
        
    - name: Install NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install esbuild
      run: npm i -g esbuild
      
    - name: Install TypeScript compiler
      run: npm i -g typescript
      
    - name: Maven Build
      run: mvn clean install

    - name: Build and Push Docker Image
      if: ${{ inputs.docker-build }}
      run: |
        docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker buildx create --use
        
        cd application
        docker buildx build --platform linux/amd64,linux/arm64 --tag ghcr.io/codbex/${{ inputs.platform-name }}:latest --push .

  integration-tests:
    if: ${{ inputs.integration-tests }}
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: true
    strategy:
      matrix:
        os: [ macos ]
    steps:
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1.5.0
        with:
          chrome-version: stable
      - if: runner.os == 'Linux'
        run: chrome --version
      - if: runner.os == 'macOS'
        run: '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version'
      - if: runner.os == 'Windows'
        run: (Get-Item (Get-Command chrome).Source).VersionInfo.ProductVersion
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
          
      - name: Set up JDK Corretto 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install esbuild
        run: npm i -g esbuild
        
      - name: Install TypeScript compiler
        run: npm i -g typescript
        
      - name: Integration tests
        run: mvn clean install -P integration-tests
        
      - name: Upload selenide screenshots
        uses: actions/upload-artifact@v4.3.1
        if: always()
        with:
          retention-days: 1
          name: selenide-screenshots
          path: application/build/reports/tests
          
  scan-image:
    if: ${{ inputs.docker-build }}
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Log in Docker Hub # required dockerhub login for docker/scout-action
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Scout Quickview and CVEs
        uses: docker/scout-action@v1
        with:
          registry-user: ${{ secrets.DOCKER_USERNAME }}
          registry-password: ${{ secrets.DOCKER_PASSWORD }}
          command: quickview,cves
          image: ghcr.io/codbex/${{ inputs.platform-name }}:latest
          sarif-file: sarif.output.json
          summary: true
          only-fixed: false

      - name: Docker Scout SBOM
        uses: docker/scout-action@v1
        with:
          command: sbom
          image: ghcr.io/codbex/${{ inputs.platform-name }}:latest
          output: sbom.json

      - name: Docker Scout Recommendations
        uses: docker/scout-action@v1
        with:
          command: recommendations
          image: ghcr.io/codbex/${{ inputs.platform-name }}:latest

      - name: Upload Docker Scout SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ inputs.upload-scanned-sarif-report }}
        with:
          sarif_file: sarif.output.json
